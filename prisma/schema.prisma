// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  name          String
  section       String?
  participation Participation[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified Boolean         @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Course {
  id        String          @id @default(uuid())
  name      String
  sessions  CourseSession[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([name])
}

model CourseSession {
  id       String  @id @default(uuid())
  courseId String
  course   Course  @relation(fields: [courseId], references: [id])
  case     String?

  // For “day only” you can use startAt at midnight. If you will add times, keep both.
  startAt DateTime @db.Timestamptz
  endAt   DateTime @db.Timestamptz

  participation Participation[] // one-to-many

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId, startAt])
  @@index([startAt])
}

model Participation {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  courseSessionId String
  courseSession   CourseSession @relation(fields: [courseSessionId], references: [id])

  participated Boolean @default(false)
  quality      Int     @default(0) // set your own default if you like
  note         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // one record per user per course session d
  @@unique([userId, courseSessionId])
  @@index([userId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
